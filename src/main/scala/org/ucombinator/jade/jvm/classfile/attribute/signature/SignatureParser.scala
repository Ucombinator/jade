package org.ucombinator.jade.jvm.classfile.attribute.signature

import scala.language.implicitConversions

import org.ucombinator.jade.jvm.classfile._
import org.ucombinator.jade.jvm.classfile.TypeCommons._


object SignatureParser extends JavaTokenParsersOpt {
  val parseJavaTypeSignature: CharSequence => ParseResult[JavaTypeSignature] = parseAll(javaTypeSignature, _)
  val parseClassSignature: CharSequence => ParseResult[ClassSignature] = parseAll(classSignature, _)
  val parseMethodSignature: CharSequence => ParseResult[MethodSignature] = parseAll(methodSignature, _)
  val parseFieldSignature: CharSequence => ParseResult[ReferenceTypeSignature] = parseAll(fieldSignature, _)

  // The grammar includes the terminal symbol Identifier to denote the name of a type, field, method, formal parameter, local variable, or type variable, as generated by a Java compiler.
//  private lazy val identifier: Parser[Identifier] = super.identifier

  // A "Java type signature" represents either a reference type or a primitive type of the Java programming language.
  private lazy val javaTypeSignature: Parser[JavaTypeSignature] =
    baseType | referenceTypeSignature

  private lazy val baseType: Parser[JavaTypeSignature] =
    ("B" | "C" | "D" | "F" | "I" | "J" | "S" | "Z") ^^
      BaseType.valueOf

  // A "reference type signature" represents a reference type of the Java programming language, that is, a class or interface type, a type variable, or an array type.
  private lazy val referenceTypeSignature: Parser[ReferenceTypeSignature] =
    classTypeSignature | typeVariableSignature | arrayTypeSignature

  //// A "class type signature" represents a (possibly parameterized) class or interface type.
  private lazy val classTypeSignature: Parser[ClassTypeSignature] =
    "L" ~> packageSpecifier ~ rep1sep(simpleClassTypeSignature, ".") <~ ";" ^^ ClassTypeSignature

  private lazy val packageSpecifier: Parser[List[JavaIdentifier]] =
    rep(identifier <~ "/")

  private lazy val simpleClassTypeSignature: Parser[SimpleClassTypeSignature] =
    identifier ~ typeArguments ^^ SimpleClassTypeSignature

  private lazy val typeArguments: Parser[List[TypeArgument]] =
    rep1bra("<", typeArgument, ">")

  private lazy val typeArgument: Parser[TypeArgument] = (
    "*" ^^^ UnBoundedTypeArgument
  | opt(wildcardIndicator) ~ referenceTypeSignature ^^ BoundedTypeArgument
  )

  private lazy val wildcardIndicator: Parser[WildcardIndicator] = (
    "+" ^^^ Extends
  | "-" ^^^ Super
  )

  //// A "type variable signature" represents a type variable.
  private lazy val typeVariableSignature: Parser[TypeVariableSignature] =
    "T" ~> identifier <~ ";" ^^ TypeVariableSignature

  //// An "array type signature" represents one dimension of an array type.
  private lazy val arrayTypeSignature: Parser[ArrayTypeSignature] =
    "[" ~> javaTypeSignature ^^ ArrayTypeSignature

  // A "class signature" encodes type information about a (possibly generic) class declaration.
  private lazy val classSignature: Parser[ClassSignature] =
    typeParameters ~ superclassSignature ~ rep(superinterfaceSignature) ^^ ClassSignature

  private lazy val typeParameters: Parser[List[TypeParameter]] =
    rep1bra("<", typeParameter, ">")

  private lazy val typeParameter: Parser[TypeParameter] =
    identifier ~ classBound ~ rep(interfaceBound) ^^ TypeParameter

  private lazy val classBound: Parser[Option[ReferenceTypeSignature]] =
    ":" ~> opt(referenceTypeSignature)

  private lazy val interfaceBound: Parser[ReferenceTypeSignature] =
    ":" ~> referenceTypeSignature

  private lazy val superclassSignature: Parser[ClassTypeSignature] =
    classTypeSignature

  private lazy val superinterfaceSignature: Parser[ClassTypeSignature] =
    classTypeSignature

  // A method signature encodes type information about a (possibly generic) method declaration.
  private lazy val methodSignature: Parser[MethodSignature] =
    typeParameters ~ ("(" ~> rep(javaTypeSignature) <~ ")") ~ result ~ rep(throwsSignature) ^^ MethodSignature

  private lazy val result: Parser[Result] =
    javaTypeSignature | voidDescriptor

  private lazy val throwsSignature: Parser[ThrowsSignature] =
    "^" ~> (classTypeSignature | typeVariableSignature)

  //// The character V indicates that the method returns no value (its result is void).
  private lazy val voidDescriptor: Parser[Result] =
    "V" ^^^ VoidDescriptor

  // A field signature encodes the (possibly parameterized) type of a field, formal parameter, or local variable declaration.
  private lazy val fieldSignature: Parser[ReferenceTypeSignature] =
    referenceTypeSignature
}
