package org.ucombinator.jade.jvm.signature

import scala.language.implicitConversions

/** JVM signatures as Specified in "The Java Virtual Machine Specification", Section 4.7.9.1
  * <https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.9.1>
  */

// TODO: if use parser combinator, the `indent` guarantees this!

// TODO: I should find a way to eliminate this `isJVMIdentifier` function, if I can promise the instances of the case
// TODO (continue): classes below can only be generated by the parser combinator!!!

// TODO: add a trait with methods: `toCanonicalForm`, `toConponmentList`
// TODO (CONTINUE): `toJavaSourceCode`

// The grammar includes the terminal symbol Identifier to denote the name of a type, field, method, formal parameter, local variable, or type variable, as generated by a Java compiler.
case class Identifier(string: String) {
  require(string.forall(isSignatureIdentifierCharacter),
    f"Illegal JVM signature identifier: $string")
}

// A "Java type signature" represents either a reference type or a primitive type of the Java programming language.
sealed trait JavaTypeSignature
  extends Result

sealed trait BaseType
  extends JavaTypeSignature
object BaseType {
  val values: List[BaseType] = List(B, C, D, F, I, J, S, Z)
  val valueOf: Map[String, BaseType] = values.map(v => v.toString -> v).toMap
}
case object B extends BaseType // `byte`    - signed byte
case object C extends BaseType // `char`    - Unicode code point in the Basic Multilingual Plane, encoded with UTF-16
case object D extends BaseType // `double`  - double-precision floating-point value
case object F extends BaseType // `float`   - single-precision floating-point value
case object I extends BaseType // `int`     - integer
case object J extends BaseType // `long`    - long integer
case object S extends BaseType // `short`   - signed short
case object Z extends BaseType // `boolean` - true or false

// A "reference type signature" represents a reference type of the Java programming language, that is, a class or interface type, a type variable, or an array type.
sealed trait ReferenceTypeSignature
  extends JavaTypeSignature

//// A "class type signature" represents a (possibly parameterized) class or interface type.
final case class ClassTypeSignature( // L
  packageSpecifier: List[Identifier], classes: List[SimpleClassTypeSignature])
  extends ReferenceTypeSignature with ThrowsSignature {

  require(classes.nonEmpty, "Empty `classes` in `ClassTypeSignature`")
}

final case class SimpleClassTypeSignature(name: Identifier, typeArguments: List[TypeArgument])

sealed trait TypeArgument
case object UnBoundedTypeArgument extends TypeArgument // *
final case class BoundedTypeArgument(
  wildcardIndicator: Option[WildcardIndicator],
  signature: ReferenceTypeSignature) extends TypeArgument

sealed trait WildcardIndicator
case object Extends extends WildcardIndicator // +
case object Super extends WildcardIndicator   // -

//// A "type variable signature" represents a type variable.
final case class TypeVariableSignature(name: Identifier) // T
  extends ReferenceTypeSignature with ThrowsSignature

//// An "array type signature" represents one dimension of an array type.
final case class ArrayTypeSignature(javaType: JavaTypeSignature) // [
  extends ReferenceTypeSignature

// A "class signature" encodes type information about a (possibly generic) class declaration.
final case class ClassSignature(
  typeParameters: List[TypeParameter],
  superClass: ClassTypeSignature,
  superinterfaces: List[ClassTypeSignature])

final case class TypeParameter(
  name: Identifier,
  superclassBound: Option[ReferenceTypeSignature],
  superinterfaceBound: List[ReferenceTypeSignature])

// A method signature encodes type information about a (possibly generic) method declaration.
final case class MethodSignature(
  typeParameters: List[TypeParameter],
  parameterTypes: List[JavaTypeSignature],
  result: Result,
  exceptions: List[ThrowsSignature])

sealed trait Result

sealed trait ThrowsSignature // ^

// The character V indicates that the method returns no value (its result is void).
case object VoidDescriptor // V
  extends Result
