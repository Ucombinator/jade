package org.ucombinator.jade.classfile

import org.scalatest.freespec.AnyFreeSpec
import org.scalatest.prop.TableDrivenPropertyChecks

class SignatureTest extends AnyFreeSpec with TableDrivenPropertyChecks {

  sealed trait SignatureType
  case object TypeSignature extends SignatureType
  case object ClassSignature extends SignatureType
  case object MethodSignature extends SignatureType

  // TODO: fix '$' in these tests

  // Tests harvested from jdk12
  val tests = Table(
    ("signature type", "signature", "expected result"),
    // format: off

    // jdk12/test/jdk/tools/jlink/plugins/SignatureParserTest.java
    (TypeSignature, "[Ljava/lang/String;", "java.lang.String[]"),
    (TypeSignature, "[[[[[[[[[[Ljava/lang/String;", "java.lang.String[][][][][][][][][][]"),
    (MethodSignature, "<T:Ljava/lang/Object;:Ljava/lang/Comparable<-TT;>;>(Ljava/lang/String;Ljava/lang/Class<TT;>;TT;Ljava/lang/Comparable<-TT;>;Ljava/lang/Comparable<-TT;>;ZZ)V", "T extends java.lang.Object&java.lang.Comparable<? super T>;java.lang.String,java.lang.Class<T>,T,java.lang.Comparable<? super T>,java.lang.Comparable<? super T>,boolean,boolean;void;"),
    (MethodSignature, "(Ljava/lang/String;ZLjava/util/EventListener;TTK;)V", ";java.lang.String,boolean,java.util.EventListener,TK;void;"),
    // These are not valid type, class, or method signatures, so I am not sure why SignatureParserTest.java has them
    //(TypeSignature, "<Y:Ljava/lang/String;>", ""),
    //(TypeSignature, "<Y:Ljava/lang/String;Z::Ljava/util/EventListener;>", ""),
    //(TypeSignature, "<Y:Ljava/lang/String;Z::Ljava/util/EventListener;O::Ljava/lang/Comparable<Ljava/lang/String;>;>", ""),
    //(TypeSignature, "<Y:Ljava/lang/String;O::Ljava/lang/Comparable<Ljava/lang/String;Ljava/lang/Float;>;>", ""),
    //(TypeSignature, "<Y:Ljava/lang/String;O::Ljava/lang/Comparable<Ljava/lang/String;Ljava/lang/Float<Ljava/lang/Object;>;>;>", ""),
    (TypeSignature, "Ljava/util/Set;", "java.util.Set"),
    (TypeSignature, "Ljavaapplication20/Titi<[Ljava/lang/String;Ljava/lang/Integer;>;", "javaapplication20.Titi<java.lang.String[],java.lang.Integer>"),
    (TypeSignature, "Ljava/lang/Comparable<TK;>;", "java.lang.Comparable<K>"),
    // These are not valid type, class, or method signatures, so I am not sure why SignatureParserTest.java has them
    //(TypeSignature, "Ljava/io/Serializable;Ljava/lang/Comparable<TK;>;", ""),
    //(TypeSignature, "<Y:Ljava/lang/String;Z::Ljava/util/EventListener;K::Ljava/util/EventListener;O::Ljava/lang/Comparable<Ljava/lang/String;>;>Ljavaapplication20/Titi<[Ljava/lang/String;Ljava/lang/Integer;TZ;>;Ljava/io/Serializable;Ljava/lang/Comparable<TK;>;", ""),
    (MethodSignature, "<PO:Ljava/lang/Object;>(Ljava/lang/Integer;TPO;)Ljava/lang/Integer;", "PO extends java.lang.Object;java.lang.Integer,PO;java.lang.Integer;"),
    (MethodSignature, "<PO:Ljava/lang/Object;>(Ljava/lang/Integer;TPO;)TPO;", "PO extends java.lang.Object;java.lang.Integer,PO;PO;"),
    (MethodSignature, "<T::Ljava/util/EventListener;>(Ljava/lang/Class<TT;>;)[TT;", "T extends java.util.EventListener;java.lang.Class<T>;T[];"),
    (MethodSignature, "<PO:LTiti;>(Ljava/lang/Integer;ITPO;)Z", "PO extends Titi;java.lang.Integer,int,PO;boolean;"),
    (ClassSignature, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;", "K extends java.lang.Object,V extends java.lang.Object;java.lang.Object;"),
    (TypeSignature, "Ljava/util/LinkedHashMap<TK;TV;>.LinkedHashIterator;Ljava/util/Iterator<TV;>;", "java.util.LinkedHashMap<K,V>.LinkedHashIterator"),
    (TypeSignature, "LToto<Ljava/lang/String;>;", "Toto<java.lang.String>"),
    (TypeSignature, "Ljavaapplication20/Titi<[Ljava/lang/String;Ljava/lang/Integer<LToto;>;TZ;>;", "javaapplication20.Titi<java.lang.String[],java.lang.Integer<Toto>,Z>"),
    (TypeSignature, "LX<[LQ;LW<LToto;>;TZ;>;", "X<Q[],W<Toto>,Z>"),
    (TypeSignature, "Ljava/lang/String<*>;", "java.lang.String<?>"),
    (TypeSignature, "Ljava/util/List<[B>;", "java.util.List<byte[]>"),
    (ClassSignature, "<T:Ljava/lang/Object;T_NODE::Ljava/util/stream/Node<TT;>;>Ljava/lang/Object;Ljava/util/stream/Node<TT;>;", "T extends java.lang.Object,T_NODE extends java.util.stream.Node<T>;java.lang.Object;java.util.stream.Node<T>"),
    (TypeSignature, "Ljavaapplication20/Titi<[Ljava/lang/String;>;", "javaapplication20.Titi<java.lang.String[]>"),
    (ClassSignature, "<A::Ljava/lang/annotation/Annotation;W::Lcom/sun/codemodel/internal/JAnnotationWriter<TA;>;>Ljava/lang/Object;Ljava/lang/reflect/InvocationHandler;Lcom/sun/codemodel/internal/JAnnotationWriter<TA;>;", "A extends java.lang.annotation.Annotation,W extends com.sun.codemodel.internal.JAnnotationWriter<A>;java.lang.Object;java.lang.reflect.InvocationHandler,com.sun.codemodel.internal.JAnnotationWriter<A>"),
    (MethodSignature, "<W::Lcom/sun/codemodel/internal/JAnnotationWriter<*>;>(Ljava/lang/Class<TW;>;Lcom/sun/codemodel/internal/JAnnotatable;)TW;", "W extends com.sun.codemodel.internal.JAnnotationWriter<?>;java.lang.Class<W>,com.sun.codemodel.internal.JAnnotatable;W;"),
    (TypeSignature, "Ljava/util/Set<Lcom/sun/tools/jdeps/JdepsTask$DotGraph<TT;>.Edge;>;", "java.util.Set<com.sun.tools.jdeps.JdepsTask$DotGraph<T>.Edge>"),
    (ClassSignature, "<E::Lcom/sun/xml/internal/rngom/ast/om/ParsedElementAnnotation;L::Lcom/sun/xml/internal/rngom/ast/om/Location;CL::Lcom/sun/xml/internal/rngom/ast/builder/CommentList<TL;>;>Ljava/lang/Object;", "E extends com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation,L extends com.sun.xml.internal.rngom.ast.om.Location,CL extends com.sun.xml.internal.rngom.ast.builder.CommentList<L>;java.lang.Object;"),
    (MethodSignature, "(Ljava/util/List<Lcom/sun/xml/internal/rngom/nc/NameClass;>;TL;TA;)Lcom/sun/xml/internal/rngom/nc/NameClass;", ";java.util.List<com.sun.xml.internal.rngom.nc.NameClass>,L,A;com.sun.xml.internal.rngom.nc.NameClass;"),
    (TypeSignature, "[Ljava/util/List;", "java.util.List[]"),
    (TypeSignature, "[Ljava/util/List<+Lcom/sun/jdi/request/EventRequest;>;", "java.util.List<? extends com.sun.jdi.request.EventRequest>[]"),
    // Note that we changed `$Entry` to `$KEntry` to avoid the possible-missing-interpolator warning
    (TypeSignature, "Lcom/sun/xml/internal/bind/v2/util/QNameMap<TV;>.HashIterator<Lcom/sun/xml/internal/bind/v2/util/QNameMap$KEntry<TV;>;>;", "com.sun.xml.internal.bind.v2.util.QNameMap<V>.HashIterator<com.sun.xml.internal.bind.v2.util.QNameMap$KEntry<V>>"),
    (TypeSignature, "[Ljava/lang/String;", "java.lang.String[]"),
    (TypeSignature, "[Ljava/lang/String<Ljava/lang/Toto<Ljava/lang/Titi;>;>;", "java.lang.String<java.lang.Toto<java.lang.Titi>>[]"),
    (MethodSignature, "<T::Ljava/util/EventListener;K:Ljava/util/BOO;>(ZCLjava/lang/Class<TT;>;IJS)[TT;", "T extends java.util.EventListener,K extends java.util.BOO;boolean,char,java.lang.Class<T>,int,long,short;T[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;ILjava/lang/Long;)TT;", "T extends java.lang.Object;T,int,java.lang.Long;T;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;ILjava/lang/Long;)TT;^TT;", "T extends java.lang.Object;T,int,java.lang.Long;T;T"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;ILjava/lang/Long;)TT;^TT;^Ljava/lang/Exception;", "T extends java.lang.Object;T,int,java.lang.Long;T;T,java.lang.Exception"),

    // jdk12/test/langtools/tools/javac/classfiles/attributes/Signature/ConstructorTest.java
    (ClassSignature, "<T:Ljava/lang/Object;>Ljava/lang/Object;", "T extends java.lang.Object;java.lang.Object;"),
    (MethodSignature, "(TT;Z)V", ";T,boolean;void;"),
    (MethodSignature, "(TT;B)V", ";T,byte;void;"),
    (MethodSignature, "(TT;C)V", ";T,char;void;"),
    (MethodSignature, "(TT;S)V", ";T,short;void;"),
    (MethodSignature, "(TT;I)V", ";T,int;void;"),
    (MethodSignature, "(TT;J)V", ";T,long;void;"),
    (MethodSignature, "(TT;F)V", ";T,float;void;"),
    (MethodSignature, "(TT;D)V", ";T,double;void;"),
    (MethodSignature, "(TT;Ljava/lang/Runnable;)V", ";T,java.lang.Runnable;void;"),
    (MethodSignature, "(TT;[Z)V", ";T,boolean[];void;"),
    (MethodSignature, "(TT;[B)V", ";T,byte[];void;"),
    (MethodSignature, "(TT;[C)V", ";T,char[];void;"),
    (MethodSignature, "(TT;[S)V", ";T,short[];void;"),
    (MethodSignature, "(TT;[I)V", ";T,int[];void;"),
    (MethodSignature, "(TT;[J)V", ";T,long[];void;"),
    (MethodSignature, "(TT;[F)V", ";T,float[];void;"),
    (MethodSignature, "(TT;[D)V", ";T,double[];void;"),
    (MethodSignature, "(TT;[Ljava/lang/Runnable;)V", ";T,java.lang.Runnable[];void;"),
    (MethodSignature, "([TT;)V", ";T[];void;"),
    (MethodSignature, "<T::Ljava/lang/Runnable;>([TT;)V", "T extends java.lang.Runnable;T[];void;"),
    (MethodSignature, "(Ljava/util/Map<**>;)V", ";java.util.Map<?,?>;void;"),
    (MethodSignature, "(TT;)V", ";T;void;"),
    (MethodSignature, "<E::Ljava/util/Set<+TT;>;>(TE;TE;)V", "E extends java.util.Set<? extends T>;E,E;void;"),
    (MethodSignature, "<E:Ljava/lang/ref/ReferenceQueue<-TT;>;:Ljava/util/Map<-TT;+TT;>;>(TE;TE;)V", "E extends java.lang.ref.ReferenceQueue<? super T>&java.util.Map<? super T,? extends T>;E,E;void;"),
    (MethodSignature, "(Ljava/util/List<+TT;>;)V", ";java.util.List<? extends T>;void;"),
    (MethodSignature, "(Ljava/util/Set<-TT;>;)V", ";java.util.Set<? super T>;void;"),
    (MethodSignature, "<E::Ljava/lang/Runnable;>(TE;)V", "E extends java.lang.Runnable;E;void;"),
    (MethodSignature, "<E:TT;>(TT;TE;)V", "E extends T;T,E;void;"),
    (ClassSignature, "Ljava/lang/Enum<LEnumTest;>;", ";java.lang.Enum<EnumTest>;"),
    (MethodSignature, "()V", ";;void;"),

    // jdk12/test/langtools/tools/javac/classfiles/attributes/Signature/ExceptionTest.java
    (ClassSignature, "<Exc:Ljava/lang/RuntimeException;:Ljava/lang/Runnable;>Ljava/lang/Object;", "Exc extends java.lang.RuntimeException&java.lang.Runnable;java.lang.Object;"),
    (MethodSignature, "<E:Ljava/lang/Exception;>()V^TE;", "E extends java.lang.Exception;;void;E"),
    (MethodSignature, "<E:Ljava/lang/Exception;>(I)V^Ljava/io/IOException;^TE;^Ljava/io/IOError;", "E extends java.lang.Exception;int;void;java.io.IOException,E,java.io.IOError"),
    (MethodSignature, "(J)V^TExc;", ";long;void;Exc"),
    (MethodSignature, "(B)V^Ljava/io/IOError;^TExc;^Ljava/io/IOException;", ";byte;void;java.io.IOError,Exc,java.io.IOException"),
    (MethodSignature, "(TExc;)V", ";Exc;void;"),
    (MethodSignature, "(I)V^TExc;", ";int;void;Exc"),
    (MethodSignature, "(J)V^TExc;^Ljava/io/IOException;", ";long;void;Exc,java.io.IOException"),
    (MethodSignature, "(TExc;)V", ";Exc;void;"),
    (MethodSignature, "<E:Ljava/lang/Exception;:Ljava/lang/Runnable;>(I)V^TE;", "E extends java.lang.Exception&java.lang.Runnable;int;void;E"),
    (MethodSignature, "<E:Ljava/lang/Exception;>(J)V^Ljava/io/IOError;^TE;^Ljava/io/IOException;", "E extends java.lang.Exception;long;void;java.io.IOError,E,java.io.IOException"),
    (MethodSignature, "<E:Ljava/lang/Exception;>(TE;)V", "E extends java.lang.Exception;E;void;"),

    // jdk12/test/langtools/tools/javac/classfiles/attributes/Signature/FieldTest.java
    (ClassSignature, "<T:Ljava/lang/Object;>Ljava/lang/Object;", "T extends java.lang.Object;java.lang.Object;"),
    (TypeSignature, "Ljava/util/List<TT;>;", "java.util.List<T>"),
    (TypeSignature, "Ljava/util/List<Ljava/util/Map<+TT;-TT;>;>;", "java.util.List<java.util.Map<? extends T,? super T>>"),
    (TypeSignature, "TT;", "T"),
    (TypeSignature, "[TT;", "T[]"),
    (TypeSignature, "Ljava/util/List<[B>;", "java.util.List<byte[]>"),
    (TypeSignature, "Ljava/util/List<[S>;", "java.util.List<short[]>"),
    (TypeSignature, "Ljava/util/List<[I>;", "java.util.List<int[]>"),
    (TypeSignature, "Ljava/util/List<[J>;", "java.util.List<long[]>"),
    (TypeSignature, "Ljava/util/List<[C>;", "java.util.List<char[]>"),
    (TypeSignature, "Ljava/util/List<[Z>;", "java.util.List<boolean[]>"),
    (TypeSignature, "Ljava/util/List<[F>;", "java.util.List<float[]>"),
    (TypeSignature, "Ljava/util/List<[D>;", "java.util.List<double[]>"),
    (TypeSignature, "Ljava/util/List<Ljava/lang/Integer;>;", "java.util.List<java.lang.Integer>"),
    (TypeSignature, "[[TT;", "T[][]"),
    (TypeSignature, "[Ljava/util/List<TT;>;", "java.util.List<T>[]"),
    (TypeSignature, "Ljava/util/List<+TT;>;", "java.util.List<? extends T>"),
    (TypeSignature, "Ljava/util/Comparator<-TT;>;", "java.util.Comparator<? super T>"),
    (TypeSignature, "Ljava/util/List<+Ljava/util/Comparator<-TT;>;>;", "java.util.List<? extends java.util.Comparator<? super T>>"),
    (TypeSignature, "Ljava/util/Comparator<*>;", "java.util.Comparator<?>"),
    (TypeSignature, "Ljava/util/Map<+[Z-[Z>;", "java.util.Map<? extends boolean[],? super boolean[]>"),
    (TypeSignature, "Ljava/util/Map<+[B-[B>;", "java.util.Map<? extends byte[],? super byte[]>"),
    (TypeSignature, "Ljava/util/Map<+[S-[S>;", "java.util.Map<? extends short[],? super short[]>"),
    (TypeSignature, "Ljava/util/Map<+[I-[I>;", "java.util.Map<? extends int[],? super int[]>"),
    (TypeSignature, "Ljava/util/Map<+[J-[J>;", "java.util.Map<? extends long[],? super long[]>"),
    (TypeSignature, "Ljava/util/Map<+[C-[C>;", "java.util.Map<? extends char[],? super char[]>"),
    (TypeSignature, "Ljava/util/Map<+[F-[F>;", "java.util.Map<? extends float[],? super float[]>"),
    (TypeSignature, "Ljava/util/Map<+[D-[D>;", "java.util.Map<? extends double[],? super double[]>"),
    (TypeSignature, "Ljava/util/Map<+[Ljava/lang/Object;-[Ljava/lang/Object;>;", "java.util.Map<? extends java.lang.Object[],? super java.lang.Object[]>"),

    // jdk12/test/langtools/tools/javac/classfiles/attributes/Signature/InnerClassTest.java
    (ClassSignature, "<T:Ljava/util/ArrayList<TT;>;:Ljava/lang/Runnable;>Ljava/lang/Object;", "T extends java.util.ArrayList<T>&java.lang.Runnable;java.lang.Object;"),
    (ClassSignature, "LInnerClassTest$1Local1;", ";InnerClassTest$1Local1;"),
    (ClassSignature, "LInnerClassTest$1Local2<Ljava/util/ArrayList<TT;>;Ljava/util/Map<Ljava/util/ArrayList<TT;>;Ljava/util/ArrayList<TT;>;>;>;", ";InnerClassTest$1Local2<java.util.ArrayList<T>,java.util.Map<java.util.ArrayList<T>,java.util.ArrayList<T>>>;"),
    (TypeSignature, "TT;", "T"),
    (TypeSignature, "[TT;", "T[]"),
    (ClassSignature, "<T:Ljava/lang/Object;U::Ljava/util/Map<+TT;-TT;>;>Ljava/lang/Object;", "T extends java.lang.Object,U extends java.util.Map<? extends T,? super T>;java.lang.Object;"),
    (MethodSignature, "(TT;TU;)V", ";T,U;void;"),
    (MethodSignature, "([TT;)[TU;", ";T[];U[];"),
    (ClassSignature, "LInnerClassTest$1Local2<Ljava/util/ArrayList<TT;>;Ljava/util/Map<Ljava/util/ArrayList<TT;>;Ljava/util/ArrayList<TT;>;>;>;", ";InnerClassTest$1Local2<java.util.ArrayList<T>,java.util.Map<java.util.ArrayList<T>,java.util.ArrayList<T>>>;"),
    (TypeSignature, "TT;", "T"),
    (TypeSignature, "[TT;", "T[]"),
    (ClassSignature, "<E:TT;U::Ljava/util/Set<-TE;>;>Ljava/lang/Object;", "E extends T,U extends java.util.Set<? super E>;java.lang.Object;"),
    (TypeSignature, "[TT;", "T[]"),
    (TypeSignature, "Ljava/util/List<+TT;>;", "java.util.List<? extends T>"),
    (TypeSignature, "Ljava/util/List<-TU;>;", "java.util.List<? super U>"),
    (TypeSignature, "Ljava/util/List<*>;", "java.util.List<?>"),
    (TypeSignature, "Ljava/util/List<Ljava/lang/Integer;>;", "java.util.List<java.lang.Integer>"),
    (TypeSignature, "Ljava/util/List<TE;>;", "java.util.List<E>"),
    (MethodSignature, "(TT;)V", ";T;void;"),
    (MethodSignature, "(TT;TE;)V", ";T,E;void;"),
    (MethodSignature, "(TT;)TE;", ";T;E;"),
    (ClassSignature, "<T:Ljava/lang/Object;>Ljava/lang/Object;", "T extends java.lang.Object;java.lang.Object;"),
    (MethodSignature, "(TT;)TT;", ";T;T;"),
    (TypeSignature, "Ljava/util/List<+Ljava/lang/Number;>;", "java.util.List<? extends java.lang.Number>"),
    (TypeSignature, "Ljava/util/List<-Ljava/lang/Number;>;", "java.util.List<? super java.lang.Number>"),
    (TypeSignature, "Ljava/util/List<*>;", "java.util.List<?>"),
    (TypeSignature, "Ljava/util/List<Ljava/lang/Integer;>;", "java.util.List<java.lang.Integer>"),
    (MethodSignature, "(Ljava/util/List<-TT;>;)Ljava/util/List<+TT;>;", ";java.util.List<? super T>;java.util.List<? extends T>;"),
    (MethodSignature, "(Ljava/util/List<+TT;>;)Ljava/util/List<-TT;>;", ";java.util.List<? extends T>;java.util.List<? super T>;"),
    (MethodSignature, "(Ljava/util/Map<**>;)Ljava/util/Map<**>;", ";java.util.Map<?,?>;java.util.Map<?,?>;"),
    (MethodSignature, "(Ljava/util/List<+TT;>;Ljava/util/List<-TT;>;Ljava/util/Map<**>;)Ljava/util/List<*>;", ";java.util.List<? extends T>,java.util.List<? super T>,java.util.Map<?,?>;java.util.List<?>;"),
    (MethodSignature, "<T::Ljava/lang/Runnable;>(Ljava/util/List<+TT;>;Ljava/util/List<-TT;>;Ljava/util/Map<**>;)Ljava/util/List<*>;", "T extends java.lang.Runnable;java.util.List<? extends T>,java.util.List<? super T>,java.util.Map<?,?>;java.util.List<?>;"),
    (ClassSignature, "LInnerClassTest<TT;>.InnerClass1<TT;Ljava/util/Set<TT;>;>;LInnerClassTest$InnerInterface<TT;>;", ";InnerClassTest<T>.InnerClass1<T,java.util.Set<T>>;InnerClassTest$InnerInterface<T>"),
    (MethodSignature, "(TT;)V", ";T;void;"),
    (MethodSignature, "(TT;TT;)V", ";T,T;void;"),
    (MethodSignature, "(TT;)TT;", ";T;T;"),
    (MethodSignature, "(Ljava/util/List<-TT;>;)Ljava/util/List<+TT;>;", ";java.util.List<? super T>;java.util.List<? extends T>;"),
    (MethodSignature, "(Ljava/util/List<+TT;>;)Ljava/util/List<-TT;>;", ";java.util.List<? extends T>;java.util.List<? super T>;"),
    (MethodSignature, "(Ljava/util/Map<**>;)Ljava/util/Map<**>;", ";java.util.Map<?,?>;java.util.Map<?,?>;"),
    (ClassSignature, "<T:Ljava/lang/String;E::Ljava/util/Set<TT;>;>Ljava/lang/Object;LInnerClassTest$InnerInterface<TE;>;", "T extends java.lang.String,E extends java.util.Set<T>;java.lang.Object;InnerClassTest$InnerInterface<E>"),
    (MethodSignature, "<E::Ljava/lang/Runnable;>(TE;)V", "E extends java.lang.Runnable;E;void;"),
    (MethodSignature, "(TT;)V", ";T;void;"),
    (MethodSignature, "(TT;TE;)V", ";T,E;void;"),
    (TypeSignature, "Ljava/util/List<+Ljava/lang/Number;>;", "java.util.List<? extends java.lang.Number>"),
    (TypeSignature, "Ljava/util/List<-Ljava/lang/Number;>;", "java.util.List<? super java.lang.Number>"),
    (TypeSignature, "Ljava/util/List<*>;", "java.util.List<?>"),
    (TypeSignature, "Ljava/util/List<Ljava/lang/Integer;>;", "java.util.List<java.lang.Integer>"),
    (MethodSignature, "(TE;)TE;", ";E;E;"),
    (MethodSignature, "(Ljava/util/List<-TE;>;)Ljava/util/List<+TE;>;", ";java.util.List<? super E>;java.util.List<? extends E>;"),
    (MethodSignature, "(Ljava/util/List<+TE;>;)Ljava/util/List<-TE;>;", ";java.util.List<? extends E>;java.util.List<? super E>;"),
    (MethodSignature, "(Ljava/util/Map<**>;)Ljava/util/Map<**>;", ";java.util.Map<?,?>;java.util.Map<?,?>;"),
    (MethodSignature, "<E:Ljava/lang/Object;>(TE;)TE;", "E extends java.lang.Object;E;E;"),
    (MethodSignature, "<E:Ljava/lang/Object;>(Ljava/util/List<-TE;>;)Ljava/util/List<+TE;>;", "E extends java.lang.Object;java.util.List<? super E>;java.util.List<? extends E>;"),
    (MethodSignature, "<E:Ljava/lang/Object;>(Ljava/util/List<+TE;>;)Ljava/util/List<-TE;>;", "E extends java.lang.Object;java.util.List<? extends E>;java.util.List<? super E>;"),
    (MethodSignature, "<E:Ljava/lang/Object;>(Ljava/util/Map<**>;)Ljava/util/Map<**>;", "E extends java.lang.Object;java.util.Map<?,?>;java.util.Map<?,?>;"),
    (ClassSignature, "Ljava/lang/Object;LInnerClassTest$ExceptionHolder<Ljava/lang/RuntimeException;>;Ljava/util/concurrent/Callable<Ljava/util/Map<**>;>;", ";java.lang.Object;InnerClassTest$ExceptionHolder<java.lang.RuntimeException>,java.util.concurrent.Callable<java.util.Map<?,?>>"),
    (MethodSignature, "()Ljava/util/Map<**>;", ";;java.util.Map<?,?>;"),
    (ClassSignature, "<E:Ljava/lang/Exception;>Ljava/lang/Object;", "E extends java.lang.Exception;java.lang.Object;"),
    (MethodSignature, "()V^TE;", ";;void;E"),
    (MethodSignature, "()TE;", ";;E;"),

    // jdk12/test/langtools/tools/javac/classfiles/attributes/Signature/MethodParameterTest.java
    (ClassSignature, "<T:Ljava/lang/Object;>Ljava/lang/Object;", "T extends java.lang.Object;java.lang.Object;"),
    (MethodSignature, "<E:TT;U::Ljava/util/List<TE;>;:Ljava/lang/Runnable;>(TT;Ljava/util/Set<-TE;>;Ljava/util/ArrayList<+Ljava/util/Set<TU;>;>;)V", "E extends T,U extends java.util.List<E>&java.lang.Runnable;T,java.util.Set<? super E>,java.util.ArrayList<? extends java.util.Set<U>>;void;"),
    (MethodSignature, "<E:TT;U::Ljava/util/List<TE;>;:Ljava/lang/Runnable;>(TT;TU;Ljava/util/ArrayList<+Ljava/util/Set<TU;>;>;)V", "E extends T,U extends java.util.List<E>&java.lang.Runnable;T,U,java.util.ArrayList<? extends java.util.Set<U>>;void;"),
    (MethodSignature, "<T::Ljava/util/List<*>;E::Ljava/util/Set<-TT;>;>(TE;[TT;Ljava/util/Map<*+TE;>;)TE;", "T extends java.util.List<?>,E extends java.util.Set<? super T>;E,T[],java.util.Map<?,? extends E>;E;"),
    (MethodSignature, "(TT;[Z)V", ";T,boolean[];void;"),
    (MethodSignature, "(TT;[C)V", ";T,char[];void;"),
    (MethodSignature, "(TT;[B)V", ";T,byte[];void;"),
    (MethodSignature, "(TT;[S)V", ";T,short[];void;"),
    (MethodSignature, "(TT;[I)V", ";T,int[];void;"),
    (MethodSignature, "(TT;[J)V", ";T,long[];void;"),
    (MethodSignature, "(TT;[F)V", ";T,float[];void;"),
    (MethodSignature, "(TT;[D)V", ";T,double[];void;"),
    (MethodSignature, "(TT;[Ljava/lang/Object;)V", ";T,java.lang.Object[];void;"),
    (MethodSignature, "([TT;)V", ";T[];void;"),
    (MethodSignature, "(TT;[Z)V", ";T,boolean[];void;"),
    (MethodSignature, "(TT;[C)V", ";T,char[];void;"),
    (MethodSignature, "(TT;[B)V", ";T,byte[];void;"),
    (MethodSignature, "(TT;[S)V", ";T,short[];void;"),
    (MethodSignature, "(TT;[I)V", ";T,int[];void;"),
    (MethodSignature, "(TT;[J)V", ";T,long[];void;"),
    (MethodSignature, "(TT;[F)V", ";T,float[];void;"),
    (MethodSignature, "(TT;[D)V", ";T,double[];void;"),
    (MethodSignature, "(TT;[Ljava/lang/Object;)V", ";T,java.lang.Object[];void;"),
    (MethodSignature, "([TT;)V", ";T[];void;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;[Z)V", "T extends java.lang.Object;T,boolean[];void;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;[C)V", "T extends java.lang.Object;T,char[];void;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;[B)V", "T extends java.lang.Object;T,byte[];void;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;[S)V", "T extends java.lang.Object;T,short[];void;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;[I)V", "T extends java.lang.Object;T,int[];void;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;[J)V", "T extends java.lang.Object;T,long[];void;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;[F)V", "T extends java.lang.Object;T,float[];void;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;[D)V", "T extends java.lang.Object;T,double[];void;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;[Ljava/lang/Object;)V", "T extends java.lang.Object;T,java.lang.Object[];void;"),
    (MethodSignature, "<T:Ljava/lang/Object;>([TT;)V", "T extends java.lang.Object;T[];void;"),

    // jdk12/test/langtools/tools/javac/classfiles/attributes/Signature/MethodTypeBoundTest.java
    (ClassSignature, "<T:Ljava/lang/Object;>Ljava/lang/Object;", "T extends java.lang.Object;java.lang.Object;"),
    (MethodSignature, "<E:Ljava/lang/String;:Ljava/lang/Runnable;:Ljava/util/Collection<+TT;>;>(TE;)TE;", "E extends java.lang.String&java.lang.Runnable&java.util.Collection<? extends T>;E;E;"),
    (MethodSignature, "<E::Ljava/lang/Runnable;:Ljava/util/Collection<-TT;>;>(TE;)TE;", "E extends java.lang.Runnable&java.util.Collection<? super T>;E;E;"),
    (MethodSignature, "<E:Ljava/util/ArrayList<+TT;>;>(TE;)TE;", "E extends java.util.ArrayList<? extends T>;E;E;"),
    (MethodSignature, "<E:Ljava/util/LinkedList<TE;>;:Ljava/util/List<TE;>;>(TE;)TE;", "E extends java.util.LinkedList<E>&java.util.List<E>;E;E;"),
    (MethodSignature, "<E:Ljava/util/LinkedList<TE;>;:Ljava/util/List<TE;>;U::Ljava/util/Iterator<-LMethodTypeBoundTest<TT;>.InnerClass<TE;>;>;>(TU;)TE;", "E extends java.util.LinkedList<E>&java.util.List<E>,U extends java.util.Iterator<? super MethodTypeBoundTest<T>.InnerClass<E>>;U;E;"),
    (MethodSignature, "<E:Ljava/util/LinkedList<TT;>;U:TE;>()V", "E extends java.util.LinkedList<T>,U extends E;;void;"),
    (ClassSignature, "<T:Ljava/lang/Object;>Ljava/lang/Object;", "T extends java.lang.Object;java.lang.Object;"),

    // jdk12/test/langtools/tools/javac/classfiles/attributes/Signature/ReturnTypeTest.java
    (ClassSignature, "<T:Ljava/awt/Frame;:Ljava/lang/Runnable;:Ljava/util/concurrent/Callable<[TT;>;>Ljava/lang/Object;", "T extends java.awt.Frame&java.lang.Runnable&java.util.concurrent.Callable<T[]>;java.lang.Object;"),
    (MethodSignature, "(TT;)[B", ";T;byte[];"),
    (MethodSignature, "(TT;)[S", ";T;short[];"),
    (MethodSignature, "(TT;)[C", ";T;char[];"),
    (MethodSignature, "(TT;)[I", ";T;int[];"),
    (MethodSignature, "(TT;)[J", ";T;long[];"),
    (MethodSignature, "(TT;)[Z", ";T;boolean[];"),
    (MethodSignature, "(TT;)[F", ";T;float[];"),
    (MethodSignature, "(TT;)[D", ";T;double[];"),
    (MethodSignature, "(TT;)[Ljava/lang/Object;", ";T;java.lang.Object[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)[B", "T extends java.lang.Object;T;byte[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)[S", "T extends java.lang.Object;T;short[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)[C", "T extends java.lang.Object;T;char[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)[I", "T extends java.lang.Object;T;int[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)[J", "T extends java.lang.Object;T;long[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)[Z", "T extends java.lang.Object;T;boolean[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)[F", "T extends java.lang.Object;T;float[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)[D", "T extends java.lang.Object;T;double[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)[Ljava/lang/Object;", "T extends java.lang.Object;T;java.lang.Object[];"),
    (MethodSignature, "()TT;", ";;T;"),
    (MethodSignature, "()[TT;", ";;T[];"),
    (MethodSignature, "<E:TT;>()TE;", "E extends T;;E;"),
    (MethodSignature, "<E:TT;>()[TE;", "E extends T;;E[];"),
    (MethodSignature, "()Ljava/util/List<TT;>;", ";;java.util.List<T>;"),
    (MethodSignature, "()[Ljava/util/List<TT;>;", ";;java.util.List<T>[];"),
    (MethodSignature, "()Ljava/util/List<+TT;>;", ";;java.util.List<? extends T>;"),
    (MethodSignature, "()[Ljava/util/List<+TT;>;", ";;java.util.List<? extends T>[];"),
    (MethodSignature, "()Ljava/util/List<-TT;>;", ";;java.util.List<? super T>;"),
    (MethodSignature, "()[Ljava/util/List<-TT;>;", ";;java.util.List<? super T>[];"),
    (MethodSignature, "()Ljava/util/Map<**>;", ";;java.util.Map<?,?>;"),
    (MethodSignature, "()[Ljava/util/Map<**>;", ";;java.util.Map<?,?>[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>()TT;", "T extends java.lang.Object;;T;"),
    (MethodSignature, "<T:Ljava/lang/Object;>()[TT;", "T extends java.lang.Object;;T[];"),
    (MethodSignature, "<T:Ljava/lang/Object;E:TT;>()TE;", "T extends java.lang.Object,E extends T;;E;"),
    (MethodSignature, "<T:Ljava/lang/Object;E:TT;>()[TE;", "T extends java.lang.Object,E extends T;;E[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>()Ljava/util/List<TT;>;", "T extends java.lang.Object;;java.util.List<T>;"),
    (MethodSignature, "<T:Ljava/lang/Object;>()[Ljava/util/List<TT;>;", "T extends java.lang.Object;;java.util.List<T>[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>()Ljava/util/List<+TT;>;", "T extends java.lang.Object;;java.util.List<? extends T>;"),
    (MethodSignature, "<T:Ljava/lang/Object;>()[Ljava/util/List<+TT;>;", "T extends java.lang.Object;;java.util.List<? extends T>[];"),
    (MethodSignature, "<T:Ljava/lang/Object;>()Ljava/util/List<-TT;>;", "T extends java.lang.Object;;java.util.List<? super T>;"),
    (MethodSignature, "<T:Ljava/lang/Object;>()[Ljava/util/List<-TT;>;", "T extends java.lang.Object;;java.util.List<? super T>[];"),
    (MethodSignature, "()Ljava/util/Map<**>;", ";;java.util.Map<?,?>;"),
    (MethodSignature, "()[Ljava/util/Map<**>;", ";;java.util.Map<?,?>[];"),
    (MethodSignature, "()Ljava/util/Map<+[Z-[Z>;", ";;java.util.Map<? extends boolean[],? super boolean[]>;"),
    (MethodSignature, "()Ljava/util/Map<+[B-[B>;", ";;java.util.Map<? extends byte[],? super byte[]>;"),
    (MethodSignature, "()Ljava/util/Map<+[S-[S>;", ";;java.util.Map<? extends short[],? super short[]>;"),
    (MethodSignature, "()Ljava/util/Map<+[I-[I>;", ";;java.util.Map<? extends int[],? super int[]>;"),
    (MethodSignature, "()Ljava/util/Map<+[J-[J>;", ";;java.util.Map<? extends long[],? super long[]>;"),
    (MethodSignature, "()Ljava/util/Map<+[C-[C>;", ";;java.util.Map<? extends char[],? super char[]>;"),
    (MethodSignature, "()Ljava/util/Map<+[F-[F>;", ";;java.util.Map<? extends float[],? super float[]>;"),
    (MethodSignature, "()Ljava/util/Map<+[D-[D>;", ";;java.util.Map<? extends double[],? super double[]>;"),
    (MethodSignature, "()Ljava/util/Map<+[Ljava/lang/Object;-[Ljava/lang/Object;>;", ";;java.util.Map<? extends java.lang.Object[],? super java.lang.Object[]>;"),
    (MethodSignature, "(TT;)V", ";T;void;"),
    (MethodSignature, "(TT;)B", ";T;byte;"),
    (MethodSignature, "(TT;)S", ";T;short;"),
    (MethodSignature, "(TT;)C", ";T;char;"),
    (MethodSignature, "(TT;)I", ";T;int;"),
    (MethodSignature, "(TT;)J", ";T;long;"),
    (MethodSignature, "(TT;)Z", ";T;boolean;"),
    (MethodSignature, "(TT;)F", ";T;float;"),
    (MethodSignature, "(TT;)D", ";T;double;"),
    (MethodSignature, "(TT;)Ljava/lang/Object;", ";T;java.lang.Object;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)V", "T extends java.lang.Object;T;void;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)B", "T extends java.lang.Object;T;byte;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)S", "T extends java.lang.Object;T;short;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)C", "T extends java.lang.Object;T;char;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)I", "T extends java.lang.Object;T;int;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)J", "T extends java.lang.Object;T;long;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)Z", "T extends java.lang.Object;T;boolean;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)F", "T extends java.lang.Object;T;float;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)D", "T extends java.lang.Object;T;double;"),
    (MethodSignature, "<T:Ljava/lang/Object;>(TT;)Ljava/lang/Object;", "T extends java.lang.Object;T;java.lang.Object;"),

    // format: on
  )

  "typeSignature/classSignature/methodSignature" - {
    "Harvested signatures" in {
      forAll(tests) { (signatureType, signature, expectedResult) =>
        assertResult(expectedResult) {
          signatureType match {
            case TypeSignature => Signature.typeSignature(signature).asString
            case ClassSignature =>
              val s = Signature.classSignature(signature)
              s._1.map(_.asString).mkString(",") + ";" + s._2.asString + ";" + s._3.map(_.asString).mkString(",")
            case MethodSignature =>
              val s = Signature.methodSignature(signature)
              List(
                s._1.map(_.asString).mkString(","),
                s._2.map(_.asString).mkString(","),
                s._3.asString,
                s._4.map(_.asString).mkString(","),
              ).mkString(";")
          }
        }
      }
    }
  }
}
